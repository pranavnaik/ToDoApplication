@model ToDoApplication.Models.Task

@{
    ViewBag.Title = "Edit Tasks";
}

<h4>Edit your Task details here</h4>

    @using (Html.BeginForm()) 
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
        @if (Model.IsComplete)
        {
            <h4 class="alert-warning">You can't edit the already completed task!!</h4>
        }
        else
        {
            <h4>Edit task details here</h4>
        }

           
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.TaskId)

            <div class="form-group">
                @Html.LabelFor(model => model.TaskName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @*We are checking whether the task is already complete*@
                    @if (Model.IsComplete)    
                    {
                        @Html.EditorFor(model => model.TaskName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } }) @*//Controls are disabled using @disabled = "disabled"*@
                    }
                    else
                    {
                        @Html.EditorFor(model => model.TaskName, new { htmlAttributes = new { @class = "form-control" } })
                    }

                    @Html.ValidationMessageFor(model => model.TaskName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TaskDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                  
                    @if (Model.IsComplete)
                    {
                        @Html.EditorFor(model => model.TaskDescription, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } }) 
                    }
                    else
                    {
                        @Html.EditorFor(model => model.TaskDescription, new { htmlAttributes = new { @class = "form-control" } })
                    }
                    @Html.ValidationMessageFor(model => model.TaskDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EnteredDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                  
                    @if (Model.IsComplete)
                    {
                        @Html.EditorFor(model => model.EnteredDate, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    }
                    else
                    {
                        @Html.EditorFor(model => model.EnteredDate, new { htmlAttributes = new { @class = "form-control" } })
                    }
                    @Html.ValidationMessageFor(model => model.TaskDescription, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.EnteredDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsComplete, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        

                        @if (Model.IsComplete)
                        {
                           @Html.EditorFor(model => model.IsComplete, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.IsComplete)
                        }
                        @Html.ValidationMessageFor(model => model.IsComplete, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AssignedTo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                   

                    @if (Model.IsComplete)
                    {
                        @Html.DropDownList("AssignedTo", new SelectList(@ViewBag.users), "Select a user", new { @class = "form-control", @disabled = "disabled" }) @*User list is passed using Viewbag*@
                    }
                    else
                    {
                        @Html.DropDownList("AssignedTo", new SelectList(@ViewBag.users), "Select a user", new { @class = "form-control" })
                    }
                    @Html.ValidationMessageFor(model => model.AssignedTo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                   
                    @if (Model.IsComplete)
                    {
                        <input type="submit" value="Save" class="btn btn-default" disabled="disabled" />  @*Submit button is disabled*@ 
                    }
                    else
                    {
                        <input type="submit" value="Save" class="btn btn-default"/> 
                    }
                </div>
            </div>
        </div>
    }




<div>
    @Html.ActionLink("Back to List", "Index")<br/>
    @Html.ActionLink("Logout", "LogOut")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
